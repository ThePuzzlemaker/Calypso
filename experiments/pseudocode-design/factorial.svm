// A few ways to do factorial

/*
pub fn factorial(n: uint): uint ->
    case n do
        0 -> 1,
        n -> n * factorial(n - 1)
    end

pub fn factorial_tail(n: uint, acc: uint \\ 1): uint ->
    case n, acc do
        0, acc -> acc
        n, acc -> factorial_tail(n - 1, n * acc)
    end

pub fn factorial_iter(n: uint): uint ->
    1.to(n).product()

pub fn factorial_iter_loop(n: uint): uint -> do
    let mut res = 1

    if n == 0 -> ret 1
    
    for i in 1.to(n) -> res *= i

    res
end
*/

// asm
(module
    (name "factorial")
    (fn "factorial" (arg uint) (ret uint) (block 0
        (register %n (ty const uint))
        (args.load %n 0)
        (uint.eq (ty uint) %n (uint.const 0))
        (jump_if (block 1) (block 2))
    ) (block 1
        (ret (uint.const 1))
    ) (block 2
        (register %0 (ty const uint))
        (register %1 (ty const uint))
        (register %2 (ty const uint))
        (uint.sub (ty uint) %0 %n (uint.const 1))
        (call (fn "factorial" 1) (block 0) %1 %0)
        (drop %0)
        (uint.mul (ty uint) %2 %n %1)
        (drop %1 %n)
        (ret %2)
    ))
)

/*

fn main() ->
    1 + 2 - 3 * 4 / 5

*/

(module ; define module
    (name "hello_simpler") ; this module's name is "hello_simpler"
    (fn "main" (ret (ty unit)) (bb 0 ; define `fn main(): unit`, start basic block 0
        ; 1 + 2 - 3 * 4 / 5
        ;   == ((1 + 2) - ((3 * 4) / 5))
        ;   == (- (+ 1 2) (/ (* 3 4) 5))

        (registers
            (%0 (ty uint))  ; let %0: uint
            (%1 (ty uint))  ; let %1: uint
            (%2 (ty uint))) ; let %2: uint

        (uint.load %0 3)              ; %0 = 3
        (uint.load %1 4)              ; %1 = 4
        (uint.mul (ty uint) %0 %0 %1) ; %0 = %0 * %1 :: (*) = mul<uint, uint>
        (uint.load %1 5)              ; %1 = 5
        (uint.div (ty uint) %0 %0 %1) ; %0 = %0 / %1 :: (/) = div<uint, uint>
        (uint.load %1 1)              ; %1 = 1
        (uint.load %2 2)              ; %2 = 2
        (uint.add (ty uint) %1 %1 %2) ; %1 = %1 + %2 :: (+) = add<uint, uint>
        (uint.sub (ty uint) %0 %1 %0) ; %0 = %1 - %0 :: (-) = sub<uint, uint>
        
        (dbg.inspect (ty uint) %0) ; essentially like "print" but more low-level, for debugging
        
        (ret) ; return
    ))
)