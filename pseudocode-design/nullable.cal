//! Pseudocode for the Nullable trait, basically a more implicit version of the
//! Rust Option type. Some functions are omitted because they are the same as
//! another function already implemeneted, as Calypso is more dynamically typed
//! than Rust.

pub marker trait Nullable ->

    fn get!(null = self) ->
        throw: NullableError("Called `Nullable.get!()` on a `null` value")
    end
    fn get!(self) -> self end

    fn expect!(null = self, err) -> throw: err end
    fn expect!(self, _) -> self end

    fn get_null!(null = self) -> null end
    fn get_null!(self) ->
        throw: NullableError("Called `Nullable.get_null!()` on a `null` value")
    end

    fn expect_null!(null = self, _) -> null end
    fn expect_null!(self, err) -> throw: err end

    fn get_or(null = self, default) -> default end
    fn get_or(self, _) -> self end

    fn get_or_else(null = self, default) where default isa fn(0) ->
        default()
    end
    fn get_or_else(self, _) -> self end

    fn get_or_default(null = self) where self has Default ->
        self.default()
    end
    fn get_or_default(self) -> self end

    fn map(null = self, _) -> null end
    fn map(self, f) where f isa fn(1) -> f(self) end

    fn map_or(null = self, default, _) -> default end
    fn map_or(self, _, f) where f isa fn(1) -> f(self) end

    fn map_or_else(null = self, default, _) where default isa fn(0) ->
        default()
    end
    fn map_or_else(self, _, f) where f isa fn(1) -> f(self) end

    fn is_null(null = self) -> true end
    fn is_null(self) -> false end

    fn is_some(null = self) -> false end
    fn is_some(self) -> true end

    fn and(null = self, _) -> null end
    fn and(self, b) -> b end

    fn filter(null = self, _) -> null end
    fn filter(self, predicate) where predicate isa fn(1) ->
        if predicate(self) -> ret self end
        null
    end

    fn xor(null = self, optb) -> optb end
    fn xor(self, null) -> self end
    fn xor(..) -> null end

end

impl marker Nullable for any